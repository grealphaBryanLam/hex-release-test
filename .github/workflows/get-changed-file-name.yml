# This is a basic workflow to help you get started with Actions

name: Get changed file name

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # workflow job
  getChangedFiles: 
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2 # checkout HEAD^ (last one)
        # create new dir for GitHub Action Artifacts
        # make dir in the new runner directory
        # run: |
        # mkdir -p $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/

      - name: Create artifacts file
        run: |
          mkdir -p path/to/artifacts/
          touch path/to/artifacts/changed_files_name.txt
          touch path/to/artifacts/deleted_files_name.txt
          ls -F path/to/artifacts/

      - name: Get Changed Files
      # You may pin to the exact commit or the version.
      # uses: tj-actions/changed-files@b2ee165d6b42ab1740e1037eb93748aad96767c5
      # id is missing
        id: changed-files
        uses: tj-actions/changed-files@v23.2
        with:
          # Github token
          token: ${{ secrets.GITHUB_TOKEN }} # optional, default is ${{ github.token }}
          # Split character for output strings
          # separator: # optional, default is ' '  
          # Include all_old_new_renamed_files output. Note this can generate a large debug output See: #501.
          # include_all_old_new_renamed_files: # optional, default is false
          # Split character for old and new filename pairs
          # old_new_separator: # optional, default is ,
          # Split character for multiple old and new filename pairs
          # old_new_files_separator: # optional, default is  
          # Source file(s) to populate the files input
          # files_from_source_file: # optional, default is 
          # Check for changes using only this list of files (Defaults to the entire repo)
          # files: # optional, default is 
          # Separator used to split the files input
          # files_separator: # optional, default is 

          # Ignore changes to this list of files
          # files_ignore: # optional, default is 
          # Separator used to split the files-ignore input
          # files_ignore_separator: # optional, default is 

          # Source file(s) to populate the files-ignore input
          # files_ignore_from_source_file: # optional, default is 
          # Specify a current commit SHA used for comparing changes
          # sha: # default is ${{ github.sha }}
          # Specify a base commit SHA on used for comparing changes
          # base_sha: # optional
          # Use the last commit on the remote branch as the base_sha for push event.
          # since_last_remote_commit: # optional, default is false
          # Specify a relative path under $GITHUB_WORKSPACE to locate the repository
          # path: # optional, default is .
          # Finds best common ancestor between two commits to use in a three-way merge as the base_sha
          # use_fork_point: # optional, default is false
          # Output filenames completely verbatim by setting this to false
          # quotepath: # optional, default is true
          # Exclude changes outside the current directory and show pathnames relative to it
          # diff_relative: # optional
          # Output the absolute path to the changed directories instead of the filenames
          # dir_names: # optional, default is false
      
      - name: List all changed files
        # check the directory
        run: |
          cd path/to/artifacts/
          pwd
          > changed_file_names.txt
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
            echo "$file" >> changed_files_name.txt;
          done

      - name: Upload text for changed_files
        uses: actions/upload-artifact@v3
        with: 
          name: changed-files-name # name of artifact
          path: path/to/artifacts/changed_files_name.txt

      - name: List all deleted files
        # "for each" statment
        run: |
          cd path/to/artifacts/
          pwd
          > deleted_files_name.txt
          for file in ${{ steps.changed-files.outputs.deleted_files }}; do
            echo "$file was deleted"
            echo "$file" >> deleted_files_name.txt
          done

      - name: Upload text for deleted_files
      # file not found
        uses: actions/upload-artifact@v3
        with: 
          name: deleted-files-name # name of artifact
          path: path/to/artifacts/deleted_files_name.txt
    
  getFileVersion:
    # reuired parameter: runs-on 
    runs-on: ubuntu-latest
    name: get file version
    needs: getChangedFiles
    steps:
      - name: download changed file name
        id: download-artifact-changed-files
        uses: actions/download-artifact@v3
        with:
          name: changed-files-name

      - name: download deleted file name
        id: download-artifact-deleted-files
        uses: actions/download-artifact@v3
        with:
          name: deleted-files-name

      - name: print the artifact download path
        run: |
          echo ${{ steps.download-artifact-changed-files.outputs.download-path }}
      
      - name: list the files in the artifact download path
        run: | 
          cd ${{ steps.download-artifact-changed-files.outputs.download-path }}
          ls -F
      
      # ensure correct naming
      
      # get the correct result
      # grep -> search the content of a file
      # grep option: -h to show the matched line(s) instead of file name
      # grep return 1 to indicate no result is found
      #
      # cut command: delimiter should be a single character
      # cut option: -f divide the line into fields, index starts at 1
      # 
      # awk: trim the field
      # option: FS 
      # 
      - name: filter the new firmware data hex filename
        run: |
          cd ${{ steps.download-artifact-changed-files.outputs.download-path }} 
          grep -h ".hex" changed_files_name.txt | cut -d "." -f 1 | awk 'BEGIN{FS="ver"} {print $2}' | res = $(</dev/stdin)
          echo $res | cut -d ' ' -f 1
          echo $res | cut -d ' ' -f 2
          echo $res | cut -d ' ' -f 3
      
      # use awk command to trim version number from filename
      # - name: test awk
      #   run: |
      #     cd ${{ steps.download-artifact-changed-files.outputs.download-path }} 
      #     awk '{FS="ver"} ; {print $2}' changed_files_name.txt
